using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Web.Http;
using App.Domain.AppServiceContracts;
using App.Domain.ValueObjects.DTO;
using Breeze.WebApi;

namespace App.UI.Controllers
{
    //[HttpHeader("Access-Control-Allow-Origin", "*")].

    [BreezeController]
    public class ArtistsRestController : ApiController
    {
        private readonly IArtistCollectorAppService _artistCollectorAppService;

        public ArtistsRestController(IArtistCollectorAppService artistCollectorAppService)
        {
            _artistCollectorAppService = artistCollectorAppService;
        }

        // GET api/<controller>
        public IQueryable<ArtistDTO> Get()
        {
            var result = _artistCollectorAppService.GetAll();
            return result.AsQueryable();
        }

        // GET api/<controller>
        public IEnumerable<ArtistWithAlbumsDTO> GetWithAlbums()
        {
            return _artistCollectorAppService.GetAllWithAlbums();
        }

        // POST api/<controller>
        public HttpResponseMessage Post(ArtistDTO artist)
        {
            var newArtist = _artistCollectorAppService.AddArtist(artist);
            return Request.CreateResponse<ArtistDTO>(HttpStatusCode.OK, newArtist);
        }

        // PUT api/<controller>/5
        public void Put(int id, ArtistDTO value)
        {
            _artistCollectorAppService.UpdateArtist(value);
        }

        // DELETE api/<controller>/5
        public void Delete(int id)
        {
        }
    }


    //public class prov : BaseContext<ArtistDTO>
    //{
    //}

    //public abstract class BaseContext<TIn> : ContextProvider
    //{

    //    protected override string BuildJsonMetadata()
    //    {
    //        return null;
    //    }

    //    protected  override List<KeyMapping> SaveChangesCore(Dictionary<Type, List<EntityInfo>> saveMap)
    //    {

    //    }

    //    protected abstract IQueryable<T> Entity { get; }
    //}


    public abstract class BaseAppService<T, TEntity> : IAppService<T, TEntity> where T : new() where TEntity : new()
    {
        public IQueryable<T> Entities { get { return Repository.GetAll().Select(e => Map(e)); } }

        public List<KeyMapping> Save(IEnumerable<EntityInfoTyped<T>> entitiesToSave)
        {
            foreach (var entityInfoTyped in entitiesToSave)
            {
                switch (entityInfoTyped.ChangeType)
                {
                    case EntityState.Added:
                        Repository.Add(Map(entityInfoTyped.Entity));
                        break;
                    case EntityState.Deleted:
                        Repository.Update(Map(entityInfoTyped.Entity));
                        break;
                    case EntityState.Modified:
                        Repository.Delete(Map(entityInfoTyped.Entity));
                        break;
                }
            }
            //TODO track changes
            return null;
        }

        public IRepo<TEntity> Repository { get; protected set; }

        public T Map(TEntity entity)
        {
            // TODO use automapper
            return new T();
        }
        public TEntity Map(T dto)
        {
            // TODO use automapper
            return new TEntity();
        }
    }

    public interface IAppService<T, TEntity>
    {
        IQueryable<T> Entities { get; }
        List<KeyMapping> Save(IEnumerable<EntityInfoTyped<T>> entitiesToSave);
        IRepo<TEntity> Repository { get; }
        T Map(TEntity entity);
    }

    public interface IRepo<T>
    {
        bool Add(T entity);
        bool Update(T entity);
        bool Delete(T entity);
        IQueryable<T> GetAll();
    }

    public class EntityInfoTyped<T>
    {
        private readonly EntityInfo _entityInfo;

        public EntityInfoTyped(EntityInfo entityInfo)
        {
            _entityInfo = entityInfo;
        }

        public T Entity { get { return (T)_entityInfo.Entity; } }
        public EntityState ChangeType { get { return _entityInfo.EntityState; } }
    }

    //protected internal EntityInfo CreateEntityInfoFromJson(dynamic jo, Type entityType) {
    //  var entityInfo = CreateEntityInfo();

    //  entityInfo.Entity = JsonSerializer.Deserialize(new JTokenReader(jo), entityType);
    //  entityInfo.EntityState = (EntityState)Enum.Parse(typeof(EntityState), (String)jo.entityAspect.entityState);
    //  entityInfo.ContextProvider = this;


    //  entityInfo.UnmappedValuesMap = JsonToDictionary(jo.__unmapped);
    //  entityInfo.OriginalValuesMap = JsonToDictionary(jo.entityAspect.originalValuesMap);

    //  var autoGeneratedKey = jo.entityAspect.autoGeneratedKey;
    //  if (entityInfo.EntityState == EntityState.Added && autoGeneratedKey != null) {
    //    entityInfo.AutoGeneratedKey = new AutoGeneratedKey(entityInfo.Entity, autoGeneratedKey);
    //  }
    //  return entityInfo;
    //}

}