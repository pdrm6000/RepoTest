define("viewmodels/data/metadata",
	[
	    'breeze',
		'viewmodels/data/datacontext',
		'knockout'
	],
	function (breeze, datacontext, ko) {

	    var mData = function () {
	        var self = this;
	    };
	    
	    mData.prototype.initializeAlbumDto = function (album) {
	        album.toDelete = ko.observable(false);
	        album.AlbumView = ko.observable('');
	        album.FullCoverUrl = ko.computed(function () {
	            return 'App.WebApp/Images/Covers/' + album.CoverUrl();
	        }, album);
	    };

	    mData.prototype.initializeArtistDto = function (artist) {
	        artist.toDelete = ko.observable(false);
	        artist.FullImageUrl = ko.computed(function () {
	            return 'App.WebApp/Images/Artist/' + artist.ImageUrl();
	        }, artist);
	    };

	    mData.prototype.initializeCommentDto = function (comment) {

	    };

	    mData.prototype.initializeRateDto = function (rate) {

	    };
	    

	    mData.prototype.init = function () {
	        // Extract Breeze metadata definition types
	        var dataType = breeze.DataType;
	        var autoGeneratedKeyType = breeze.AutoGeneratedKeyType;
	        var validator = breeze.Validator;

	        datacontext.albumsMetadataStore.addEntityType({
	            shortName: "AlbumCatalogDTO",
	            namespace: "App.ApplicationService.DTO",
	            autoGeneratedKeyType: autoGeneratedKeyType.Identity,
	            dataProperties: {
	                Id: { dataType: dataType.Int32, isNullable: false, isPartOfKey: true },
	                AlbumName: { dataType: dataType.String, maxLength: 100, isNullable: false, validators: [validator.required(), validator.maxLength({ maxLength: 100 })] },
	                CoverUrl: { dataType: dataType.String, isNullable: false },
	                Year: { dataType: dataType.Int32, isNullable: false },
	                ArtistId: { dataType: dataType.Int32, isNullable: false },
	                ArtistName: { dataType: dataType.String, isNullable: true },
	            },
	        });
	        datacontext.albumsMetadataStore.registerEntityTypeCtor("AlbumCatalogDTO", null, this.initializeAlbumDto);


	        datacontext.artistsMetadataStore.addEntityType({
	            shortName: "ArtistDTO",
	            namespace: "App.ApplicationService.DTO",
	            autoGeneratedKeyType: autoGeneratedKeyType.Identity,
	            dataProperties: {
	                Id: { dataType: dataType.Int32, isNullable: false, isPartOfKey: true },
	                Name: { dataType: dataType.String, maxLength: 100, isNullable: false, validators: [validator.required(), validator.maxLength({ maxLength: 100 })] },
	                ImageUrl: { dataType: dataType.String, isNullable: false },
	            },
	        });
	        datacontext.artistsMetadataStore.registerEntityTypeCtor("ArtistDTO", null, this.initializeArtistDto);


	        datacontext.commentsMetadataStore.addEntityType({
	            shortName: "CommentDTO",
	            namespace: "App.ApplicationService.DTO",
	            autoGeneratedKeyType: autoGeneratedKeyType.Identity,
	            dataProperties: {
	                Id: { dataType: dataType.Int32, isNullable: false, isPartOfKey: true },
	                Date: { dataType: dataType.DateTime, isNullable: false, },
	                Body: { dataType: dataType.String, isNullable: false, maxLength: 500, validators: [validator.required(), validator.maxLength({ maxLength: 500 })] },
	                AlbumId: { dataType: dataType.Int32, isNullable: false },
	                UserId: { dataType: dataType.String, isNullable: false },
	            },
	        });
	        datacontext.commentsMetadataStore.registerEntityTypeCtor("CommentDTO", null, this.initializeCommentDto);


	        datacontext.ratesMetadataStore.addEntityType({
	            shortName: "RateDTO",
	            namespace: "App.ApplicationService.DTO",
	            autoGeneratedKeyType: autoGeneratedKeyType.Identity,
	            dataProperties: {
	                Id: { dataType: dataType.Int32, isNullable: false, isPartOfKey: true },
	                Value: { dataType: dataType.Decimal, isNullable: false },
	                Date: { dataType: dataType.DateTime, isNullable: false },
	                AlbumId: { dataType: dataType.Int32, isNullable: false },
	                UserId: { dataType: dataType.String, isNullable: true },
	            },
	        });
	        datacontext.ratesMetadataStore.registerEntityTypeCtor("RateDTO", null, this.initializeRateDto);
	            
        };
	    
	    return mData;

	});